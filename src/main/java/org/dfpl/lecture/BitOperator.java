package org.dfpl.lecture;

public class BitOperator {
    public static void main(String[] args) {
        /*
        * short는 16비트(2바이트) 자료형입니다.
           0x는 16진수를 의미합니다.
        * */
        short a = (short) 0x55ff; // 0101 0101 1111 1111
        short b = (short) 0x00ff; // 0000 0000 1111 1111

        System.out.println("[비트 연산 결과]:"); //16진수 형태로 출력
        System.out.printf("%04x\n", (short)(a & b)); // AND 0x00ff
        //  0101 0101 1111 1111  (a)
        //& 0000 0000 1111 1111  (b)
        //-------------------------
        //  0000 0000 1111 1111  (결과)

        System.out.printf("%04x\n", (short)(a | b)); // OR 0x55ff
        // 0101 0101 1111 1111  (a)
        //| 0000 0000 1111 1111  (b)
        //-------------------------
        //  0101 0101 1111 1111  (결과)

        System.out.printf("%04x\n", (short)(a ^ b)); // XOR 두 비트가 서로 다를 때 결과가 1이 됩니다. (같으면 0)
        // 0101 0101 1111 1111  (a)
        //^ 0000 0000 1111 1111  (b)
        //-------------------------
        //  0101 0101 0000 0000  (결과) 0x5500

        System.out.printf("%04x\n", (short)(~a)); // NOT
        // a      ->  0101 0101 1111 1111
        //~a     ->  1010 1010 0000 0000  (이것이 진짜 NOT)
        // aa00

        byte c = 20; // 00010100
        byte d = -8; // 11111000
        System.out.println("[시프트 연산 결과]:");
        System.out.println(c<<2); // c를 왼쪽으로 2비트 시프트
        // 00010100 (20)  ->  01010000 (80)

        System.out.println(c>>2); // c를 오른쪽으로 시프트 0 삽입
        //>> (부호 있는 오른쪽 시프트)
        //c >> 2 , d >> 2 : 비트들을 오른쪽으로 이동시킵니다.
        // 왼쪽의 빈자리는 최상위 비트(MSB, 부호 비트)와 같은 값으로 채웁니다.
        // 00010100 (20)  ->  00000101 (5)

        System.out.println(d>>2); // d를 오른쪽으로 시프트 1 삽입
        // 2의 보수 변환
        // 8 => 00001000 -> 11110111 -> +1 -> 11111000
        // 11111000 (-8)  ->  11111110 (-2)  // 왼쪽에 1이 채워짐 (부호 유지)

        System.out.printf("%x\n",(d>>>2)); // d를 오른쪽으로 시프트 0 삽입
        // >>> (부호 없는 오른쪽 시프트)
        //d >>> 2 : 비트들을 오른쪽으로 이동시킵니다. 왼쪽의 빈자리를 부호와 상관없이 무조건 0으로 채웁니다.
        // 3ffffffe

        // 자바 비트 연산자 ( >>, <<, >>>) -> 피연산자가 byte, short, char -> int로 자동 승격 (부호확장)
    }
}